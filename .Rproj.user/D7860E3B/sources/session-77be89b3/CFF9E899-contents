##################################
# Example - GeneSet Invented
##################################

setwd("..")
files <- list.files("Functions")
for (file in files){
    source(paste("Functions/",file , sep = ""))
}
setwd("Examples")

#load("GeneSetsInvented.RData")
#load("SimulationDivideMatrix.RData")

load("SimulationMatrix_GenesSetInvented2.RData")
load("GeneSetsInvented.RData")

#Previous normalization
filterFun <- filterfun(pOverA(0.8, 5))
cutoff <- 1
number <- sum(apply(cpm(study1Ex), 1, max) < cutoff)
drop <- which(apply(cpm(study1Ex), 1, max) < cutoff)
study1Ex <- study1Ex[-drop,]
#study1Ex <- study1Ex[genefilter(study1Ex, filterFun),]
study1Ex <- tmm(study1Ex)
study1Ex <- log2(study1Ex + 1)


number <- sum(apply(cpm(study2Ex), 1, max) < cutoff)
drop <- which(apply(cpm(study2Ex), 1, max) < cutoff)
study2Ex <- study2Ex[-drop,]
#study2Ex <- study2Ex[genefilter(study2Ex, filterFun),]
study2Ex <- tmm(study2Ex)
study2Ex <- log2(study2Ex + 1)

number <- sum(apply(cpm(study3Ex), 1, max) < cutoff)
drop <- which(apply(cpm(study3Ex), 1, max) < cutoff)
study3Ex <- study3Ex[-drop,]
#study3Ex <- study3Ex[genefilter(study3Ex, filterFun),]
study3Ex <- tmm(study3Ex)
study3Ex <- log2(study3Ex + 1)

number <- sum(apply(cpm(study4Ex), 1, max) < cutoff)
drop <- which(apply(cpm(study4Ex), 1, max) < cutoff)
study4Ex <- study4Ex[-drop,]
#study4Ex <- study4Ex[genefilter(study4Ex, filterFun),]
study4Ex <- tmm(study4Ex)
study4Ex <- log2(study4Ex + 1)

number <- sum(apply(cpm(study5Ex), 1, max) < cutoff)
drop <- which(apply(cpm(study5Ex), 1, max) < cutoff)
study5Ex <- study5Ex[-drop,]
#study5Ex <- study5Ex[genefilter(study5Ex, filterFun),]
study5Ex <- tmm(study5Ex)
study5Ex <- log2(study5Ex + 1)



#Create the Meta-analysis object with Expression matrix
listMatrices <- list(study1Ex, study2Ex, study3Ex, study4Ex, study5Ex)
listPhenodata <- list(study1Pheno, study2Pheno, study3Pheno, study4Pheno, study5Pheno)
phenoGroups <- c("Condition","Condition", "Condition", "Condition", "Condition")
phenoCases <- list("Case", "Case", "Case", "Case", "Case")
phenoControls <- list("Healthy", "Healthy", "Healthy", "Healthy", "Healthy")
ObjectMA_sim <- createObjectMA(listEX = listMatrices, 
    listPheno = listPhenodata, namePheno = phenoGroups, 
    expGroups = phenoCases, refGroups = phenoControls)
names(ObjectMA_sim) <- c("study1", "study2", "study3", "study4", "study5")



#Pass Expression matrix to the different pathways matrix (Uncomment for do it again)

#GSVA
MP_GSVA <- objectExMA.to.objectMApath(objectExMA = ObjectMA_sim, 
    geneSets = GeneSetsInvented, pathMethod = "GSVA", minSize = 7, n_cores = 5)

#Z-score
MP_Zscore <- objectExMA.to.objectMApath(objectExMA = ObjectMA_sim,
    geneSets = GeneSetsInvented, pathMethod = "Zscore", minSize = 7, n_cores = 5)

#ssGSEA
MP_ssGSEA <- objectExMA.to.objectMApath(objectExMA = ObjectMA_sim,
    geneSets = GeneSetsInvented, pathMethod = "ssGSEA", minSize = 7, internal_n_cores = 7)

#Singscore
MP_Singscore <- objectExMA.to.objectMApath(objectExMA = ObjectMA_sim, 
    geneSets = GeneSetsInvented, pathMethod = "Singscore", minSize = 7, n_cores = 5)

#save(MP_GSVA, MP_Zscore, MP_ssGSEA, MP_Singscore, file = "MP_sim.RData")

#Results of the meta-analysis
#GSVA
MP_GSVA_fil <- filteringPaths(MP_GSVA, threshold = "sd")
res_GSVA <- metaAnalysisESpath(MP_GSVA_fil, typeMethod = "REM", measure = "limma", proportionData = 1)
sig_GSVA <- subset(res_GSVA, res_GSVA$FDR<0.05)
#Z-score
MP_Zscore_fil <- filteringPaths(MP_Zscore, threshold = "sd")
res_Zscore <- metaAnalysisESpath(MP_Zscore_fil, typeMethod = "REM", measure = "limma",
    proportionData = 1, WithinVarCorrect = TRUE)
sig_Zscore <- subset(res_Zscore, res_Zscore$FDR<0.05)
#ssGSEA
MP_ssGSEA_fil <- filteringPaths(MP_ssGSEA, threshold = "sd")
res_ssGSEA <- metaAnalysisESpath(MP_ssGSEA_fil, measure = "limma",typeMethod = "REM", proportionData = 1)
sig_ssGSEA <- subset(res_ssGSEA, res_ssGSEA$FDR<0.05)
#singscore
MP_Singscore_fil <- filteringPaths(MP_Singscore, threshold = "sd")
res_Singscore <- metaAnalysisESpath(MP_Singscore_fil, measure = "limma", 
    typeMethod = "REM", WithinVarCorrect = TRUE, proportionData = 1)
sig_Singscore <-subset(res_Singscore, res_Singscore$FDR<0.05)



###########################################
# Comparasion with the rest of methods
############################################

################################################################
# REM meta-analysis of gene expression and then FGSEA (MA + FGSEA)
################################################################

MA_fgsea <- metaAnalysisDE(ObjectMA_sim,
    typeMethod = "REM",
    missAllow = 0.3,
    proportionData = 1)

set.seed(1325488741)
results_Com <- MA_fgsea$Com.ES
results_Com <- MA_fgsea$AveFC
names(results_Com) <- rownames(MA_fgsea)
results_Com <- results_Com[order(results_Com)]
res_MA_fgsea <- fgsea(pathways = GeneSetsInvented, stats = results_Com, minSize = 7, nproc = 2)
sig_MA_FGSEA <- subset(res_MA_fgsea, res_MA_fgsea$padj < 0.05)

################################
# MAPE_G
################################

MAPE_G <- metaAnalysisDE(ObjectMA_sim,
    typeMethod = "maxP",
    missAllow = 0.3,
    proportionData = 1)

set.seed(1325488741)
results_MAPE_G <- MAPE_G$AveFC
names(results_MAPE_G) <- rownames(MAPE_G)
results_MAPE_G <- results_MAPE_G[order(results_MAPE_G)]
res_MAPE_G <- fgsea(pathways = GeneSetsInvented, stats = results_MAPE_G, 
    minSize = 7, nproc = 1)
sig_MAPE_G <- subset(res_MAPE_G, res_MAPE_G$padj < 0.05)




################################
# MAPE_P
################################

#Individual FGSEA of each study

#Study1
desing <- model.matrix(~ 0 + Condition, data = study1Pheno)
fit <- lmFit(study1Ex, desing)
contr <- makeContrasts(ConditionCase - ConditionHealthy, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
res_limma1 <- top.table
logFC1 <- res_limma1$logFC
names(logFC1) <- rownames(res_limma1)
logFC1 <- logFC1[order(logFC1)]
fgsea1 <- fgsea(pathways = GeneSetsInvented, stats = logFC1, 
    minSize = 7, nproc = 1)

#Study2
desing <- model.matrix(~ 0 + Condition, data = study2Pheno)
fit <- lmFit(study2Ex, desing)
contr <- makeContrasts(ConditionCase - ConditionHealthy, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
res_limma2 <- top.table
logFC2 <- res_limma2$logFC
names(logFC2) <- rownames(res_limma2)
logFC2 <- logFC2[order(logFC2)]
fgsea2 <- fgsea(pathways = GeneSetsInvented, stats = logFC2, 
    minSize = 7, nproc = 1)


#Study3
desing <- model.matrix(~ 0 + Condition, data = study3Pheno)
fit <- lmFit(study3Ex, desing)
contr <- makeContrasts(ConditionCase - ConditionHealthy, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
res_limma3 <- top.table
logFC3 <- res_limma3$logFC
names(logFC3) <- rownames(res_limma3)
logFC3 <- logFC3[order(logFC3)]
fgsea3 <- fgsea(pathways = GeneSetsInvented, stats = logFC3, 
    minSize = 7, nproc = 1)

#Study4
desing <- model.matrix(~ 0 + Condition, data = study4Pheno)
fit <- lmFit(study4Ex, desing)
contr <- makeContrasts(ConditionCase - ConditionHealthy, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
res_limma4 <- top.table
logFC4 <- res_limma4$logFC
names(logFC4) <- rownames(res_limma4)
logFC4 <- logFC4[order(logFC4)]
fgsea4 <- fgsea(pathways = GeneSetsInvented, stats = logFC4, 
    minSize = 7, nproc = 1)

#study5
desing <- model.matrix(~ 0 + Condition, data = study5Pheno)
fit <- lmFit(study5Ex, desing)
contr <- makeContrasts(ConditionCase - ConditionHealthy, levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
top.table <- topTable(tmp, sort.by = "P", n = Inf)
res_limma5 <- top.table
logFC5 <- res_limma5$logFC
names(logFC5) <- rownames(res_limma5)
logFC5 <- logFC5[order(logFC5)]
fgsea5 <- fgsea(pathways = GeneSetsInvented, stats = logFC5, 
    minSize = 7, nproc = 1)

fgsea1pval <- as.matrix(fgsea1$pval)
colnames(fgsea1pval) <- "Study1"
rownames(fgsea1pval) <- fgsea1$pathway

fgsea2pval <- as.matrix(fgsea2$pval)
colnames(fgsea2pval) <- "Study2"
rownames(fgsea2pval) <- fgsea2$pathway

fgsea3pval <- as.matrix(fgsea3$pval)
colnames(fgsea3pval) <- "Study3"
rownames(fgsea3pval) <- fgsea3$pathway

fgsea4pval <- as.matrix(fgsea4$pval)
colnames(fgsea4pval) <- "Study4"
rownames(fgsea4pval) <- fgsea4$pathway

fgsea5pval <- as.matrix(fgsea5$pval)
colnames(fgsea5pval) <- "Study5"
rownames(fgsea5pval) <- fgsea5$pathway


#FUNCTION FOR MERGING MATRIX TAKING INTO ACCOUNT MISSING ROWS
.matrixmerge <- function(lista){
    t.lista <- lapply(lista, t)
    fused <- plyr::rbind.fill.matrix(t.lista)
    fused <- t(fused)
    colnames(fused) <- names(lista)
    return(fused)
}

fgseas <- list(study1 = fgsea1pval, study2 = fgsea2pval, study3 = fgsea3pval, study4 = fgsea4pval, study5 = fgsea5pval)
fgseas <- DExMA:::.matrixmerge(fgseas)

MAPE_P <- DExMA:::.getMaxP(fgseas)
res_MAPE_P <- as.data.frame(MAPE_P$pval)
res_MAPE_P$padj <- p.adjust(res_MAPE_P$`MAPE_P$pval`, method = "BH")
sig_MAPE_P <- subset(res_MAPE_P, res_MAPE_P$padj < 0.05)


################################
# MAPE_I
################################

mapeG <- as.matrix(res_MAPE_G$pval)
colnames(mapeG) <- "MAPE_G"
rownames(mapeG) <- res_MAPE_G$pathway

mapeP <- as.matrix(res_MAPE_P$`MAPE_P$pval`)
colnames(mapeP) <- "MAPE_P"
rownames(mapeP) <- rownames(res_MAPE_P)

mapes <- list(MAPE_G = mapeG, MAPE_P=mapeP)
mapes <- DExMA:::.matrixmerge(mapes)

MAPE_I <- DExMA:::.getMinP(mapes)
res_MAPE_I <- as.data.frame(MAPE_I$pval)
res_MAPE_I$padj <- p.adjust(res_MAPE_I$`MAPE_I$pval`, method = "BH")
sig_MAPE_I <- subset(res_MAPE_I, res_MAPE_I$padj < 0.05)



